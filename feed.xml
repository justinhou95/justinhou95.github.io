<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://justinhou95.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://justinhou95.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-30T06:46:49+00:00</updated><id>https://justinhou95.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">Best friends building Python package</title><link href="https://justinhou95.github.io/blog/2024/build-project/" rel="alternate" type="text/html" title="Best friends building Python package"/><published>2024-08-03T15:12:00+00:00</published><updated>2024-08-03T15:12:00+00:00</updated><id>https://justinhou95.github.io/blog/2024/build-project</id><content type="html" xml:base="https://justinhou95.github.io/blog/2024/build-project/"><![CDATA[<p>I’ve recently published a Python package. At least for me, I become more careful and comprehensive to the codes, once decided publishing the project. Immediately, I stand on the opposite an start questioning and criticizing every piece of codes. But I have to say this helps me improve the codes a lot. For example, in machine learning projects, I start thinking how flexible my structure could be adapted to other data and model. Publishing your codes if definitely something you want to try!</p> <blockquote> <p>“If I have seen further it is by standing on the shoulders of giants.” <br/> –Issac Newton</p> </blockquote> <p>There are fantastic already fantastic tools and pipelines which helps you build a robust, flexible, clean and beautiful project. In this post, I would like to introduce those friends of mine to you.</p> <h3 id="venv">venv</h3> <p>Python environments can drive one crazy. There are lots of nice tools but personally I prefer <code>venv</code> which is a standard library of Python. First you create a virtual enviroment with</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python3.9 <span class="nt">-m</span> venv .venv
<span class="gp">$</span><span class="w"> </span><span class="nb">source</span> .venv/bin/activate
</code></pre></div></div> <p>This creates a .venv folder to store your environment. You can gitignore it by adding <code>.venv/</code> to <code>.gitignore</code>. Now you can start managing your packages.</p> <ul> <li><a href="https://snarky.ca/how-virtual-environments-work/">How virtual environments work</a></li> <li><a href="https://github.com/github/gitignore/blob/main/Python.gitignore">gitignore template</a></li> </ul> <h3 id="pip--pip-tools">pip + pip-tools</h3> <p>Pip is also a standard library of Python which helps you manage your dependency. My practice is to use with pip-tools.</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip setuptools pip-tools
</code></pre></div></div> <p>First you need a <code>.in</code> specifying the packages you need, e.g.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># requirements/train.in
torch 
seaborn
...
</code></pre></div></div> <p>Based on this file, piptools find a list of packages you need. You can output them in a <code>.txt</code> file.</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python <span class="nt">-m</span> piptools compile requirements/train.in <span class="nt">--output-file</span> requirements/train.txt
</code></pre></div></div> <p>Now you have all the packages you need in the <code>.txt</code> file, e.g.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#
# This file is autogenerated by pip-compile with Python 3.9
# by the following command:
#
#    pip-compile --output-file=requirements/train.txt requirements/train.in
#
absl-py==2.1.0
    # via ml-collections
annotated-types==0.6.0
    # via pydantic
anyio==4.3.0
...
</code></pre></div></div> <p>At the end, we just need to install these packages from pip:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">-r</span> requirements/train.txt
</code></pre></div></div> <p>If you also integrate your package into environment in an <a href="https://setuptools.pypa.io/en/latest/userguide/development_mode.html">editable mode</a>, run</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">--editable</span> <span class="nb">.</span>
</code></pre></div></div> <p>Just keep in mind that this requires you to <a href="https://setuptools.pypa.io/en/latest/userguide/quickstart.html">setup the package</a> first.</p> <p>Check the following blogs explaining why using native library:</p> <ul> <li><a href="https://www.bitecode.dev/p/why-not-tell-people-to-simply-use">Why not tell people to “simply” use pyenv, poetry, pipx or anaconda</a></li> <li><a href="https://www.bitecode.dev/p/back-to-basics-with-pip-and-venv">Back to basics with pip and venv</a></li> <li><a href="https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/">Boring Python: dependency management</a></li> </ul> <h3 id="folder-tree">folder tree</h3> <p>A good folder tree is also very useful managing your project. Here is how I order my stuff.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>projectname/
├── .venv/
├── dist/
│   ├── projectname-1.0.0-py3-none-any.whl
│   └── projectname-1.0.0.tar.gz
├── notebooks/
│   └── notebook.ipynb
├── scripts/
│   └── script.py
├── data/
│   └── data.npy
├── src/
│   └──packagename/
│       ├── __init__.py
│       └── subpackage/
│           ├── __init__.py
│           ├── subpackage.py
├── tests/
│   └── test_subpackage.py
├── docs/
│    └── Makefile
├── .gitignore
├── Makefile
├── Dockerfile
├── requirements/
│   ├── dev-requirements.in
│   ├── dev-requirements.txt
│   ├── requirements.in
│   ├── requirements.txt
│ 
├── pyproject.toml
├── MANIFEST.in
├── tox.ini
├── LICENSE
└── README.md
</code></pre></div></div> <p>You probably already know what they are for by just google their names. Anyway, I would explain the files later when we meet them.</p> <ul> <li><a href="https://gist.github.com/Nivratti/ea81e952e07ffbbf03e6d44a7dbbef8f">directory-structure-deep-learning</a></li> </ul> <h3 id="vscode-pep8-black-flake8-isort-pylance">VScode, pep8, black, flake8, isort, pylance,</h3> <p>Already we have the environment and can code now! Here are some tools that helps you writing better code. I use VScode with the following extensions installed.</p> <ul> <li><code>pylance</code> helps <a href="https://code.visualstudio.com/docs/python/editing">writing codes faster</a></li> <li><code>pep8</code> and <code>flake8</code> helps <a href="https://code.visualstudio.com/docs/python/linting">linting Python codes</a></li> <li><code>black</code> and <code>isort</code> helps <a href="https://code.visualstudio.com/docs/python/formatting">formatting Python codes</a> You can easily installed them in the extensions market of VScode</li> </ul> <h3 id="pytest">pytest</h3> <p>After coding, you should always test your code before publishing. <a href="https://docs.pytest.org/en/stable/index.html#">Pytest</a> facilitate this. Writing test codes is very easy following the official tutorial and after that you only need to run</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python <span class="nt">-m</span> pytest
</code></pre></div></div> <p>which output clean and clear test results:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">============================= test session starts ==============================
platform darwin -- Python 3.9.13, pytest-8.2.2, pluggy-1.5.0
rootdir: /Users/hous/Github/NeuralHedge
configfile: pyproject.toml
plugins: anyio-4.4.0
collected 4 items                                                              

tests/test_data.py ..                                                    [ 50%]
tests/test_nn.py .                                                       [ 75%]
tests/test_utils.py .                                                    [100%]

=============================== warnings summary ===============================
tests/test_nn.py::test_network
  /Users/hous/Github/NeuralHedge/.venv/lib/python3.9/site-packages/torch/nn/modules/lazy.py:181: UserWarning: Lazy modules are a new feature under heavy development so changes to the API or functionality can happen at any moment.
    warnings.warn('Lazy modules are a new feature under heavy development '

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
========================= 4 passed, 1 warning in 3.68s =========================
</span></code></pre></div></div> <ul> <li><a href="https://www.obeythetestinggoat.com/book/preface.html">Obey the Testing Goat!</a></li> </ul> <h3 id="setuptools">setuptools</h3> <p>Now you are ready to publish your codes. I follow the pipelines:</p> <ul> <li><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">Packaging Python Projects</a></li> <li><a href="https://setuptools.pypa.io/en/latest/userguide/index.html">User guide: setuptools</a></li> <li><a href="https://realpython.com/pypi-publish-python-package/">How to Publish an Open-Source Python Package to PyP</a></li> </ul> <p>Always check the latest tutorial! <code>pyproject.toml</code> is the new standardized format to describe project metadata declaratively, introduced with <a href="https://peps.python.org/pep-0621/">PEP 621</a>, but many projects are still using the <code>setup.py</code> approach.</p> <h3 id="tox">tox</h3> <p>With <a href="https://tox.wiki/en/latest/index.html">tox</a>, you can even test your codes in different environments. Simply write a configuration of tests and environments.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># tox.in
[tox]
env_list = py38, py39

[testenv]
deps = pytest
command = pytest tests
</code></pre></div></div> <p>Then <code>tox</code> would do everything for you</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>tox
<span class="gp">.pkg: _optional_hooks&gt;</span><span class="w"> </span>python /Users/hous/Github/NeuralHedge/.venv/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta
<span class="gp">.pkg: get_requires_for_build_sdist&gt;</span><span class="w"> </span>python /Users/hous/Github/NeuralHedge/.venv/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta
<span class="gp">.pkg: build_sdist&gt;</span><span class="w"> </span>python /Users/hous/Github/NeuralHedge/.venv/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta
<span class="gp">py38: install_package&gt;</span><span class="w"> </span>python <span class="nt">-I</span> <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">--force-reinstall</span> <span class="nt">--no-deps</span> /Users/hous/Github/NeuralHedge/.tox/.tmp/package/4/neuralhedge-0.1.0.tar.gz
<span class="go">py38: OK ✔ in 4.98 seconds
</span><span class="gp">py39: install_package&gt;</span><span class="w"> </span>python <span class="nt">-I</span> <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">--force-reinstall</span> <span class="nt">--no-deps</span> /Users/hous/Github/NeuralHedge/.tox/.tmp/package/5/neuralhedge-0.1.0.tar.gz
<span class="go">  py38: OK (4.98 seconds)
  py39: OK (2.94 seconds)
  congratulations :) (8.03 seconds)
</span></code></pre></div></div> <h2 id="reference">Reference</h2> <p>This blog is greatly inspired by</p> <ul> <li><a href="https://www.samueldowling.com/2020/06/08/how-to-set-up-a-python-project-and-development-environment/">How to set up a python project and development environment</a></li> </ul>]]></content><author><name></name></author><summary type="html"><![CDATA[I’ve recently published a Python package. At least for me, I become more careful and comprehensive to the codes, once decided publishing the project. Immediately, I stand on the opposite an start questioning and criticizing every piece of codes. But I have to say this helps me improve the codes a lot. For example, in machine learning projects, I start thinking how flexible my structure could be adapted to other data and model. Publishing your codes if definitely something you want to try!]]></summary></entry><entry><title type="html">Accidentally commit large files or sensitive data</title><link href="https://justinhou95.github.io/blog/2024/commit-large-files/" rel="alternate" type="text/html" title="Accidentally commit large files or sensitive data"/><published>2024-08-03T15:12:00+00:00</published><updated>2024-08-03T15:12:00+00:00</updated><id>https://justinhou95.github.io/blog/2024/commit-large-files</id><content type="html" xml:base="https://justinhou95.github.io/blog/2024/commit-large-files/"><![CDATA[<h3 id="what-if-i-accidentally-commit-something">What if I accidentally commit something？</h3> <p>Commit in Git is just like taking a snapshot of some of your data and save it in a folder called <code>.git</code>. Imagine you take snapshots of your room everyday. But one day you realize a sticky note with your bank password is on the wall! Although, you can tear off or avoid including it in the snapshots in the future. But anyone with your snapshot history will see it! In a nutshell, what you add/modify/delete in the working directory and what you commit in the future will not affect your commit history. They are just quietly lying there.</p> <h3 id="where-are-them">Where are them?</h3> <p>Sometimes, you even don’t know where is your large files. So it is good to check them first.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git rev-list --objects --all |
  git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' |
  sed -n 's/^blob //p' |
  sort --numeric-sort --key=2 |
  cut -c 1-12,41- |
</code></pre></div></div> <p>This will give you human-readable output like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
0d99bb931299  530KiB path/to/some-image.jpg
2ba44098e28f   12MiB path/to/hires-image.png
bd1741ddce0d   63MiB path/to/some-video-1080p.mp4
</code></pre></div></div> <ul> <li><a href="https://stackoverflow.com/questions/10622179/how-to-find-identify-large-commits-in-git-history">https://stackoverflow.com/questions/10622179/how-to-find-identify-large-commits-in-git-history</a></li> </ul> <h3 id="rewrite-history">Rewrite history</h3> <p>Changing/deleting the history is highly risky, so make sure you really need to do it! There are also other ways you can share your repo without sharing the history or sharing part of the history. If you really think certain files should be deleted in the history in your repo, carefully follows tutorials:</p> <ul> <li><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository</a></li> <li><a href="https://www.geeksforgeeks.org/how-to-remove-a-large-file-from-commit-history-in-git/">https://www.geeksforgeeks.org/how-to-remove-a-large-file-from-commit-history-in-git/</a></li> <li><a href="https://rtyley.github.io/bfg-repo-cleaner/">https://rtyley.github.io/bfg-repo-cleaner/</a></li> </ul> <p>At the end, don’t forget to force push to the server because you have already rewritten the history.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git push --force
</code></pre></div></div> <h3 id="good-practice">Good practice</h3> <p>Next time, add the sticker note with your password into <code>.gitignore</code> so that it will not be included in the snapshot.</p> <ul> <li><a href="https://git-scm.com/docs/gitignore">https://git-scm.com/docs/gitignore</a></li> </ul>]]></content><author><name></name></author><summary type="html"><![CDATA[What if I accidentally commit something？]]></summary></entry><entry><title type="html">Install Python on Linux without Sudo</title><link href="https://justinhou95.github.io/blog/2024/install-python/" rel="alternate" type="text/html" title="Install Python on Linux without Sudo"/><published>2024-04-20T15:12:00+00:00</published><updated>2024-04-20T15:12:00+00:00</updated><id>https://justinhou95.github.io/blog/2024/install-python</id><content type="html" xml:base="https://justinhou95.github.io/blog/2024/install-python/"><![CDATA[<p>I was running my machine learning project on a Linux server and needed to install Python 3.8 for some packages. I decided to install natively to keep everything under control, see this nice <a href="https://www.bitecode.dev/p/installing-python-the-bare-minimum">blog</a>. Without sudo right, things get a little different from standard installation but I found this nice <a href="https://www.bobbydurrettdba.com/2020/02/11/python-3-8-1-linux-install-without-root/">blog</a> by Bobby Durrett making this super simple.</p> <ul> <li>Download the python from <a href="https://www.python.org">www.python.org</a></li> </ul> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[hous@ada-25:Downloads] $</span><span class="w"> </span>wget https://www.python.org/ftp/python/3.8.18/Python-3.8.18.tgz
<span class="gp">Python-3.8.18.tgz   100%[===================&gt;</span><span class="o">]</span>  26.07M  <span class="nt">--</span>.-KB/s    <span class="k">in </span>0.1s    
<span class="go">2024-04-20 12:36:05 (230 MB/s) - ‘Python-3.8.18.tgz’ saved [27337549/27337549]
</span><span class="gp">[hous@ada-25:Downloads] $</span><span class="w"> 
</span></code></pre></div></div> <ul> <li>Unzip it</li> <li>Go to the folder</li> </ul> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[hous@ada-25:Downloads] $</span><span class="w"> </span><span class="nb">tar </span>zxfv Python-3.8.18.tgz 
<span class="go">Python-3.8.18/
Python-3.8.18/Lib/
</span><span class="c">......
</span><span class="go">Python-3.8.18/config.guess
Python-3.8.18/Makefile.pre.in
</span><span class="gp">[hous@ada-25:Downloads] $</span><span class="w"> </span><span class="nb">cd </span>Python-3.8.18/
<span class="gp">[hous@ada-25:Python-3.8.18] $</span><span class="w"> 
</span></code></pre></div></div> <ul> <li>Check the absolute path of home directory</li> <li>Make a directory where you want to put your python. I called my <code>.localpython3.8</code> (name it whatever you want) and make it under the home directory.</li> <li>Configured the Python make</li> </ul> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[hous@ada-25:Python-3.8.18] $</span><span class="w"> </span><span class="nb">pwd</span>
<span class="go">/u/hous/Downloads/Python-3.8.18
</span><span class="gp">[hous@ada-25:Python-3.8.18] $</span><span class="w"> </span><span class="nb">mkdir</span> /u/hous/.localpython3.8
<span class="gp">[hous@ada-25:Python-3.8.18] $</span><span class="w"> </span>./configure <span class="nt">--prefix</span><span class="o">=</span>/u/hous/.localpython3.8
<span class="go">checking build system type... x86_64-pc-linux-gnu
checking host system type... x86_64-pc-linux-gnu
</span><span class="c">......
</span><span class="go">creating Modules/Setup.local
creating Makefile
If you want a release build with all stable optimizations active (PGO, etc),
please run ./configure --enable-optimizations
</span><span class="gp">[hous@ada-25:Python-3.8.18] $</span><span class="w"> 
</span></code></pre></div></div> <ul> <li>Make and make altinstall (see difference between install and altinstall <a href="https://stackoverflow.com/questions/16018463/difference-in-details-between-make-install-and-make-altinstall">here</a>)</li> </ul> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[hous@ada-25:Python-3.8.18] $</span><span class="w"> </span>make
<span class="go">gcc -c -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall  
</span><span class="c">...
</span><span class="gp">[hous@ada-25:Python-3.8.18] $</span><span class="w"> </span>make altinstall
<span class="c">......
</span><span class="go">Successfully installed pip-23.0.1 setuptools-56.0.0
</span><span class="gp">[hous@ada-25:Python-3.8.18] $</span><span class="w"> 
</span></code></pre></div></div> <p>Now we can already use <code>~/.localpython3.8/bin/python3.8</code> to run python</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[hous@ada-25:~] $</span><span class="w"> </span>~/.localpython3.8/bin/python3.8
<span class="go">Python 3.8.18 (default, Apr 20 2024, 12:51:15) 
[GCC 13.2.1 20240316 (Red Hat 13.2.1-7)] on linux
Type "help", "copyright", "credits" or "license" for more information.
</span><span class="gp">&gt;</span><span class="o">&gt;&gt;</span> <span class="nb">exit</span><span class="o">()</span>
<span class="gp">[hous@ada-25:~] $</span><span class="w"> 
</span></code></pre></div></div> <p>Perfect! Just to make life easier, we go to <code>~/.localpython3.8/bin/</code> and link <code>python3.8</code> to <code>python</code></p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[hous@ada-25:Python-3.8.18] $</span><span class="w"> </span><span class="nb">cd</span> ~/.localpython3.8/bin
<span class="gp">[hous@ada-25:bin] $</span><span class="w"> </span><span class="nb">ln</span> <span class="nt">-s</span> python3.8 python
<span class="gp">[hous@ada-25:bin] $</span><span class="w"> </span><span class="nb">ln</span> <span class="nt">-s</span> pip3.8 pip
<span class="gp">[hous@ada-25:bin] $</span><span class="w"> 
</span></code></pre></div></div> <p>Now, we only need to type <code>~/.localpython3.8/bin/python</code>. Still a bit inconvenient, so next we add the folder path to PATH variable (abundant nice tutorial online explaining this). This is not just for convenient but avoid you running the wrong python.</p> <p><code>export PATH=/u/hous/.localpython3.8/bin:$PATH</code> to <code>.bashrc</code> file.</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[hous@ada-25:Python-3.8.18] $</span><span class="w"> </span><span class="nb">cd</span> ~
<span class="gp">[hous@ada-25:~] $</span><span class="w"> </span>vi .bashrc
<span class="gp">#</span><span class="w"> </span>user<span class="s1">'s bashrc
</span><span class="gp">#</span><span class="w">
</span><span class="gp">export PATH=/u/hous/.localpython3.8/bin:$</span><span class="s1">PATH
</span><span class="c">...
</span><span class="gp">[hous@ada-25:~] $</span><span class="w">
</span></code></pre></div></div> <p>After this, we logout and login. Now we can simply type <code>python</code> and check the installation.</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[hous@ada-25:~] $</span><span class="w"> </span>python
<span class="go">Python 3.8.18 (default, Apr 20 2024, 12:51:15) 
[GCC 13.2.1 20240316 (Red Hat 13.2.1-7)] on linux
Type "help", "copyright", "credits" or "license" for more information.
</span><span class="gp">&gt;</span><span class="o">&gt;&gt;</span> <span class="nb">exit</span><span class="o">()</span>
<span class="gp">[hous@ada-25:~] $</span><span class="w"> </span>pip <span class="nt">-V</span>
<span class="go">pip 23.0.1 from /u/hous/.localpython3.8/lib/python3.8/site-packages/pip (python 3.8)
</span><span class="gp">[hous@ada-25:~] $</span><span class="w"> </span>pip list
<span class="go">Package    Version
---------- -------
pip        23.0.1
setuptools 56.0.0

</span><span class="gp">[notice] A new release of pip is available: 23.0.1 -&gt;</span><span class="w"> </span>24.0
<span class="go">[notice] To update, run: pip install --upgrade pip
</span><span class="gp">[hous@ada-25:~] $</span><span class="w"> 
</span></code></pre></div></div> <p>We are done! I usually then create a virtual environment and play with my machine learning codes, see <a href="https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/">here</a> why venv is a good idea.</p> <h2 id="reference">Reference</h2> <ul> <li><a href="https://pages.github.nceas.ucsb.edu/NCEAS/Computing/local_install_python_on_a_server.html">https://pages.github.nceas.ucsb.edu/NCEAS/Computing/local_install_python_on_a_server.html</a></li> <li><a href="https://www.bobbydurrettdba.com/2020/02/11/python-3-8-1-linux-install-without-root/">https://www.bobbydurrettdba.com/2020/02/11/python-3-8-1-linux-install-without-root/</a></li> <li><a href="https://thelazylog.com/install-python-as-local-user-on-linux/">https://thelazylog.com/install-python-as-local-user-on-linux/</a></li> </ul>]]></content><author><name></name></author><summary type="html"><![CDATA[I was running my machine learning project on a Linux server and needed to install Python 3.8 for some packages. I decided to install natively to keep everything under control, see this nice blog. Without sudo right, things get a little different from standard installation but I found this nice blog by Bobby Durrett making this super simple.]]></summary></entry><entry><title type="html">Mass splitting under adapted Wasserstein distance</title><link href="https://justinhou95.github.io/blog/2024/mass-split/" rel="alternate" type="text/html" title="Mass splitting under adapted Wasserstein distance"/><published>2024-04-08T15:12:00+00:00</published><updated>2024-04-08T15:12:00+00:00</updated><id>https://justinhou95.github.io/blog/2024/mass-split</id><content type="html" xml:base="https://justinhou95.github.io/blog/2024/mass-split/"><![CDATA[<p>In classical optimal transport, simply by Jensen’s inequality we have</p> \[\mathcal{W}_1(\frac{1}{N}\sum_{n=1}^N \mu_n, \frac{1}{N}\sum_{n=1}^N \nu_n) \leq \frac{1}{N}\sum_{n=1}^N \mathcal{W}_1(\mu_n, \nu_n).\] <p>However in adapted optimal transport, this is in general not true. A simple counter example is by taking \(\mu_1 = \delta_{(0,1)}\), \(\mu_2 = \delta_{(0,-1)}\), \(\nu_1 = \delta_{(\varepsilon,1)}\), \(\nu_2 = \delta_{(-\varepsilon,-1)}\). Then we have</p> \[\mathcal{AW}_1(\frac{1}{N}\sum_{n=1}^N \mu_n, \frac{1}{N}\sum_{n=1}^N \nu_n) = 1-\varepsilon &gt; \varepsilon = \frac{1}{N}\sum_{n=1}^N \mathcal{AW}_1(\mu_n, \nu_n).\] <p>Conjecture: under some regularity conditions (quantified by \(\epsilon\)), we have</p> \[\mathcal{AW}_1(\frac{1}{N}\sum_{n=1}^N \mu_n, \frac{1}{N}\sum_{n=1}^N \nu_n) \leq \frac{1}{N}\sum_{n=1}^N \mathcal{AW}_1(\mu_n, \nu_n) + C_\epsilon.\]]]></content><author><name></name></author><summary type="html"><![CDATA[In classical optimal transport, simply by Jensen’s inequality we have]]></summary></entry></feed>